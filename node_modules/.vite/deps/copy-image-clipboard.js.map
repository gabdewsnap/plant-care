{
  "version": 3,
  "sources": ["../../copy-image-clipboard/dist/index.js"],
  "sourcesContent": ["function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\n\n/**\r\n * Gets a blob from an image source attribute using the Fetch API.\r\n *\r\n * @param {string} imageSource The image source attribute.\r\n * @returns {Promise<Blob>} A promise that resolves to a image blob.\r\n */\r\nfunction getBlobFromImageSource(imageSource) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`${imageSource}`);\r\n        return yield response.blob();\r\n    });\r\n}\r\n/**\r\n * Checks if is a JPEG image blob.\r\n *\r\n * @param {Blob} blob A blob.\r\n * @returns {boolean} A boolean indicating if the blob is a JPEG image or not.\r\n */\r\nfunction isJpegBlob(blob) {\r\n    return blob.type.includes('jpeg');\r\n}\r\n/**\r\n * Checks if is a PNG image blob.\r\n *\r\n * @param {Blob} blob A blob.\r\n * @returns {boolean} A boolean indicating if the blob is a PNG image or not.\r\n */\r\nfunction isPngBlob(blob) {\r\n    return blob.type.includes('png');\r\n}\r\n/**\r\n * Created an image element for a given image source attribute.\r\n *\r\n * @param {string} imageSource The image source attribute.\r\n * @returns {Promise<HTMLImageElement>} A promise that resolves to an image element. Rejects the promise if cannot create an image element.\r\n */\r\nfunction createImageElement(imageSource) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise(function (resolve, reject) {\r\n            const imageElement = document.createElement('img');\r\n            imageElement.crossOrigin = 'anonymous';\r\n            imageElement.src = imageSource;\r\n            imageElement.onload = function (event) {\r\n                const target = event.target;\r\n                resolve(target);\r\n            };\r\n            imageElement.onabort = reject;\r\n            imageElement.onerror = reject;\r\n        });\r\n    });\r\n}\r\n/**\r\n * Gets a blob from an image element.\r\n *\r\n * @param {HTMLImageElement} imageElement An image element\r\n * @returns {Promise<Blob>} A Promise that resolves to a image blob. Rejects the promise if cannot get a blob from the image element.\r\n */\r\nfunction getBlobFromImageElement(imageElement) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise(function (resolve, reject) {\r\n            const canvas = document.createElement('canvas');\r\n            const context = canvas.getContext('2d');\r\n            if (context) {\r\n                const { width, height } = imageElement;\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n                context.drawImage(imageElement, 0, 0, width, height);\r\n                canvas.toBlob(function (blob) {\r\n                    if (blob)\r\n                        resolve(blob);\r\n                    else\r\n                        reject('Cannot get blob from image element');\r\n                }, 'image/png', 1);\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Converts a JPEG image blob to PNG.\r\n *\r\n * @param {Blob} imageBlob JPEG blob that will be converted to PNG.\r\n * @returns {Promise<Blob>} A Promise that resolves to a PNG image blob. Rejects the promise if cannot create an image element or if cannot get a blob from the image element.\r\n */\r\nfunction convertBlobToPng(imageBlob) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const imageSource = URL.createObjectURL(imageBlob);\r\n        const imageElement = yield createImageElement(imageSource);\r\n        return yield getBlobFromImageElement(imageElement);\r\n    });\r\n}\r\n/**\r\n * Copies a blob to user's clipboard.\r\n *\r\n * Throws an error if cannot write on the user's clipboard.\r\n *\r\n * @param {Blob} blob Blob to be copied.\r\n */\r\nfunction copyBlobToClipboard(blob) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const items = { [blob.type]: blob };\r\n        const clipboardItem = new ClipboardItem(items);\r\n        yield navigator.clipboard.write([clipboardItem]);\r\n    });\r\n}\r\n/**\r\n * Copies a PNG or JPEG image to clipboard.\r\n *\r\n * This function downloads the image to copy with it's original dimensions.\r\n *\r\n * - If the image is JPEG it will be converted automatically to PNG and then copied.\r\n * - If the image is not PNG or JPEG an error will be thrown.\r\n *\r\n * @param {string} imageSource The image source attribute.\r\n * @returns {Promise<Blob>} A promise that resolves to a blob. Generally you don't need to use the returned blob for nothing.\r\n */\r\nfunction copyImageToClipboard(imageSource) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const blob = yield getBlobFromImageSource(imageSource);\r\n        if (isJpegBlob(blob)) {\r\n            const pngBlob = yield convertBlobToPng(blob);\r\n            yield copyBlobToClipboard(pngBlob);\r\n            return blob;\r\n        }\r\n        else if (isPngBlob(blob)) {\r\n            yield copyBlobToClipboard(blob);\r\n            return blob;\r\n        }\r\n        throw new Error('Cannot copy this type of image to clipboard');\r\n    });\r\n}\r\n/**\r\n * Requests the permission to write data on the user's clipboard.\r\n *\r\n * Reasons why you generally don't need to use this function:\r\n *\r\n * - The Permission to write data on the clipboard is automatically granted to pages when they are in the browser active tab.\r\n * - If the browser has not implemented the Permissions API yet, this function will return false.\r\n *\r\n * @returns {Promise<boolean>} A Promise that resolves to a boolean indicating if the permission was granted or not.\r\n */\r\nfunction requestClipboardWritePermission() {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!((_a = navigator === null || navigator === void 0 ? void 0 : navigator.permissions) === null || _a === void 0 ? void 0 : _a.query))\r\n            return false;\r\n        const { state } = yield navigator.permissions.query({\r\n            name: 'clipboard-write',\r\n        });\r\n        return state === 'granted';\r\n    });\r\n}\r\n/**\r\n * Checks if can copy images to the clipboard using the Fetch API and the Clipboard API.\r\n *\r\n * @returns {Boolean} A boolean indicating if can copy or not.\r\n */\r\nfunction canCopyImagesToClipboard() {\r\n    var _a;\r\n    const hasFetch = typeof fetch !== 'undefined';\r\n    const hasClipboardItem = typeof ClipboardItem !== 'undefined';\r\n    const hasNavigatorClipboardWriteFunction = !!((_a = navigator === null || navigator === void 0 ? void 0 : navigator.clipboard) === null || _a === void 0 ? void 0 : _a.write);\r\n    return hasFetch && hasClipboardItem && hasNavigatorClipboardWriteFunction;\r\n}\n\nexport { canCopyImagesToClipboard, convertBlobToPng, copyBlobToClipboard, copyImageToClipboard, createImageElement, getBlobFromImageElement, getBlobFromImageSource, isJpegBlob, isPngBlob, requestClipboardWritePermission };\n"],
  "mappings": "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",
  "names": []
}
